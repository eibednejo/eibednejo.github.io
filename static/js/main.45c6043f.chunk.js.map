{"version":3,"sources":["supabase/client.ts","components/LoginPage.tsx","components/SignupPage.tsx","components/AdminPage.tsx","components/UserProfilePage.tsx","components/SubscriptionPage.tsx","utils/db.ts","components/ChatPage.tsx","App.tsx","index.tsx"],"names":["supabase","createClient","process","LoginPage","email","setEmail","useState","password","setPassword","error","setError","history","useHistory","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","user","auth","signIn","message","id","localStorage","setItem","push","type","value","onChange","target","required","style","display","gap","justifyContent","onClick","background","color","border","SignupPage","success","setSuccess","signUp","AdminPage","UserProfilePage","setUser","loading","setLoading","name","setName","useEffect","_user$user_metadata","user_metadata","fetchUser","update","data","alert","readOnly","SubscriptionPage","uploadFile","storage","from","upload","file","Error","ChatPage","csvFile","setCsvFile","knowledgeBaseFile","setKnowledgeBaseFile","dbConnection","setDbConnection","accept","event","files","placeholder","PrivateRoute","_ref","component","Component","rest","_objectWithoutProperties","_excluded","Route","_objectSpread","render","props","getItem","Redirect","to","App","Router","Switch","path","exact","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45c6043f.chunk.js","sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL as string;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY as string;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const history = useHistory();\n\n    const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setError(null);\n\n        const { user, error } = await supabase.auth.signIn({\n            email,\n            password,\n        });\n\n        if (error) {\n            setError(error.message);\n        } else {\n            if (user && user.id) {\n                localStorage.setItem('authToken', user.id);\n            }\n            history.push('/');\n        }\n    };\n\n    return (\n        <div className=\"fancy-container\">\n            <h2>Login</h2>\n            <form className=\"fancy-form\" onSubmit={handleLogin}>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                </div>\n                {error && <p className=\"fancy-message error\">{error}</p>}\n                <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center' }}>\n                    <button type=\"submit\">Log In</button>\n                    <button\n                        type=\"button\"\n                        onClick={() => history.push('/signup')}\n                        style={{ background: '#fff', color: '#f76b1c', border: '1.5px solid #f76b1c' }}\n                    >\n                        Sign Up\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\n\nconst SignupPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [success, setSuccess] = useState<string | null>(null);\n\n    const handleSignup = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setError(null);\n        setSuccess(null);\n\n        const { user, error } = await supabase.auth.signUp({\n            email,\n            password,\n        });\n\n        if (error) {\n            setError(error.message);\n        } else {\n            setSuccess('Signup successful! Please check your email for confirmation.');\n            setEmail('');\n            setPassword('');\n        }\n    };\n\n    return (\n        <div className=\"fancy-container\">\n            <h2>Sign Up</h2>\n            <form className=\"fancy-form\" onSubmit={handleSignup}>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                </div>\n                <button type=\"submit\">Sign Up</button>\n            </form>\n            {error && <p className=\"fancy-message error\">{error}</p>}\n            {success && <p className=\"fancy-message success\">{success}</p>}\n        </div>\n    );\n};\n\nexport default SignupPage;","import React from 'react';\n\nconst AdminPage = () => {\n    return (\n        <div className=\"fancy-container\">\n            <h1>Admin Dashboard</h1>\n            <p>Welcome, admin! Here you can manage users, view analytics, and configure settings.</p>\n        </div>\n    );\n};\n\nexport default AdminPage;","import React, { useEffect, useState } from 'react';\nimport { supabase } from '../supabase/client';\n\nconst UserProfilePage = () => {\n    const [user, setUser] = useState<any>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            const user = supabase.auth.user();\n            if (!user) {\n                setError('No user found');\n            } else {\n                setUser(user);\n                setName(user.user_metadata?.name || '');\n                setEmail(user.email || '');\n            }\n            setLoading(false);\n        };\n\n        fetchUser();\n    }, []);\n    const handleUpdateProfile = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const { error } = await supabase.auth.update({ data: { name } });\n        if (error) {\n            setError(error.message);\n        } else {\n            alert('Profile updated successfully!');\n        }\n    };\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div className=\"fancy-container\">\n            <h1>User Profile</h1>\n            <form className=\"fancy-form\" onSubmit={handleUpdateProfile}>\n                <div>\n                    <label>Name:</label>\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        readOnly\n                    />\n                </div>\n                <button type=\"submit\">Update Profile</button>\n            </form>\n        </div>\n    );\n};\n\nexport default UserProfilePage;","import React from 'react';\n\nconst SubscriptionPage: React.FC = () => {\n    return (\n        <div className=\"fancy-container\">\n            <h1>Subscription Management</h1>\n            <p>Manage your subscription plan, payment methods, and billing history here.</p>\n        </div>\n    );\n};\n\nexport default SubscriptionPage;","import { supabase } from '../supabase/client';\n\nexport const fetchUserData = async (userId: string) => {\n    const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId);\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};\n\nexport const manageSubscription = async (userId: string, subscriptionData: any) => {\n    const { data, error } = await supabase\n        .from('subscriptions')\n        .upsert({ user_id: userId, ...subscriptionData });\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};\n\nexport const uploadFile = async (file: File) => {\n    const { data, error } = await supabase.storage\n        .from('uploads')\n        .upload(file.name, file);\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\nimport { uploadFile } from '../utils/db';\n\nconst ChatPage = () => {\n    const [csvFile, setCsvFile] = useState<File | null>(null);\n    const [knowledgeBaseFile, setKnowledgeBaseFile] = useState<File | null>(null);\n    const [dbConnection, setDbConnection] = useState('');\n\n    const handleCsvUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) return;\n        const file = event.target.files[0];\n        if (file) {\n            setCsvFile(file);\n            await uploadFile(file);\n        }\n    };\n    const handleKnowledgeBaseUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) return;\n        const file = event.target.files[0];\n        if (file) {\n            setKnowledgeBaseFile(file);\n            await uploadFile(file);\n        }\n    };\n    const handleDbConnection = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDbConnection(event.target.value);\n    };\n\n    const connectToDatabase = async () => {\n        // Implement database connection logic here\n    };\n\n    return (\n        <div className=\"fancy-container\">\n            <h1>Chat Interface</h1>\n            <form className=\"fancy-form\">\n                <div>\n                    <h2>Upload CSV File</h2>\n                    <input type=\"file\" accept=\".csv\" onChange={handleCsvUpload} />\n                </div>\n                <div>\n                    <h2>Upload Knowledge Base File</h2>\n                    <input type=\"file\" accept=\".txt,.pdf\" onChange={handleKnowledgeBaseUpload} />\n                </div>\n                <div>\n                    <h2>Database Connection</h2>\n                    <input\n                        type=\"text\"\n                        value={dbConnection}\n                        onChange={handleDbConnection}\n                        placeholder=\"Enter database connection string\"\n                    />\n                    <button type=\"button\" onClick={connectToDatabase}>Connect</button>\n                </div>\n            </form>\n        </div>\n    );\n};\n\nexport default ChatPage;","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport LoginPage from './components/LoginPage';\nimport SignupPage from './components/SignupPage';\nimport AdminPage from './components/AdminPage';\nimport UserProfilePage from './components/UserProfilePage';\nimport SubscriptionPage from './components/SubscriptionPage';\nimport ChatPage from './components/ChatPage';\n\n// Simple auth check (replace with real logic as needed)\nconst isAuthenticated = () => !!localStorage.getItem('authToken');\n\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n    <Route\n        {...rest}\n        render={props =>\n            isAuthenticated() ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n);\n\nconst App = () => (\n    <Router>\n        <Switch>\n            <Route path=\"/login\" component={LoginPage} />\n            <Route path=\"/signup\" component={SignupPage} />\n            <PrivateRoute path=\"/\" exact component={ChatPage} />\n            <PrivateRoute path=\"/admin\" component={AdminPage} />\n            <PrivateRoute path=\"/profile\" component={UserProfilePage} />\n            <PrivateRoute path=\"/subscriptions\" component={SubscriptionPage} />\n            <Route render={() => <Redirect to=\"/login\" />} />\n        </Switch>\n    </Router>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}