{"version":3,"sources":["supabase/client.ts","components/LoginPage.tsx","components/SignupPage.tsx","components/AdminPage.tsx","components/UserProfilePage.tsx","components/SubscriptionPage.tsx","utils/db.ts","components/ChatPage.tsx","App.tsx","index.tsx"],"names":["supabase","createClient","process","LoginPage","email","setEmail","useState","password","setPassword","error","setError","history","useHistory","_jsxs","children","_jsx","onSubmit","async","e","preventDefault","user","auth","signIn","message","push","type","value","onChange","target","required","style","color","SignupPage","success","setSuccess","signUp","AdminPage","UserProfilePage","setUser","loading","setLoading","name","setName","useEffect","_user$user_metadata","user_metadata","fetchUser","update","data","alert","readOnly","SubscriptionPage","id","price","map","plan","onClick","handleSubscriptionSelect","planId","console","log","concat","uploadFile","storage","from","upload","file","Error","ChatPage","csvFile","setCsvFile","knowledgeBaseFile","setKnowledgeBaseFile","dbConnection","setDbConnection","accept","event","files","placeholder","PrivateRoute","_ref","component","Component","rest","_objectWithoutProperties","_excluded","Route","_objectSpread","render","props","localStorage","getItem","Redirect","to","App","Router","Switch","path","exact","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"0LAEA,MAGMA,EAAWC,YAHGC,2CACIA,oN,WCoDTC,MAnDGA,KACd,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAOC,GAAYJ,mBAAwB,MAC5CK,EAAUC,cAkBhB,OACIC,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,UACJD,eAAA,QAAMG,SAnBMC,UAChBC,EAAEC,iBACFT,EAAS,MAET,MAAM,KAAEU,EAAI,MAAEX,SAAgBT,EAASqB,KAAKC,OAAO,CAC/ClB,QACAG,aAGAE,EACAC,EAASD,EAAMc,SAEfZ,EAAQa,KAAK,UAOeV,SAAA,CACxBD,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,WACPC,cAAA,SACIU,KAAK,QACLC,MAAOtB,EACPuB,SAAWT,GAAMb,EAASa,EAAEU,OAAOF,OACnCG,UAAQ,OAGhBhB,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,cACPC,cAAA,SACIU,KAAK,WACLC,MAAOnB,EACPoB,SAAWT,GAAMV,EAAYU,EAAEU,OAAOF,OACtCG,UAAQ,OAGfpB,GAASM,cAAA,KAAGe,MAAO,CAAEC,MAAO,OAAQjB,SAAEL,IACvCM,cAAA,UAAQU,KAAK,SAAQX,SAAC,iBCSvBkB,MAvDIA,KACf,MAAO5B,EAAOC,GAAYC,mBAAS,KAC5BC,EAAUC,GAAeF,mBAAS,KAClCG,EAAOC,GAAYJ,mBAAwB,OAC3C2B,EAASC,GAAc5B,mBAAwB,MAqBtD,OACIO,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,YACJD,eAAA,QAAMG,SAtBOC,UACjBC,EAAEC,iBACFT,EAAS,MACTwB,EAAW,MAEX,MAAM,KAAEd,EAAI,MAAEX,SAAgBT,EAASqB,KAAKc,OAAO,CAC/C/B,QACAG,aAGAE,EACAC,EAASD,EAAMc,UAEfW,EAAW,gEACX7B,EAAS,IACTG,EAAY,MAOiBM,SAAA,CACzBD,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,WACPC,cAAA,SACIU,KAAK,QACLC,MAAOtB,EACPuB,SAAWT,GAAMb,EAASa,EAAEU,OAAOF,OACnCG,UAAQ,OAGhBhB,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,cACPC,cAAA,SACIU,KAAK,WACLC,MAAOnB,EACPoB,SAAWT,GAAMV,EAAYU,EAAEU,OAAOF,OACtCG,UAAQ,OAGhBd,cAAA,UAAQU,KAAK,SAAQX,SAAC,eAEzBL,GAASM,cAAA,KAAGe,MAAO,CAAEC,MAAO,OAAQjB,SAAEL,IACtCwB,GAAWlB,cAAA,KAAGe,MAAO,CAAEC,MAAO,SAAUjB,SAAEmB,QCnCxCG,MAhBaA,IAEpBvB,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,oBACJC,cAAA,WAAAD,SACIC,cAAA,MAAAD,SAAI,sBAGRC,cAAA,WAAAD,SACIC,cAAA,MAAAD,SAAI,iCCsDLuB,MA9DSA,KACpB,MAAOjB,EAAMkB,GAAWhC,mBAAc,OAC/BiC,EAASC,GAAclC,oBAAS,IAChCG,EAAOC,GAAYJ,mBAAwB,OAC3CmC,EAAMC,GAAWpC,mBAAS,KAC1BF,EAAOC,GAAYC,mBAAS,IAEnCqC,oBAAU,KACY1B,WACd,MAAMG,EAAOpB,EAASqB,KAAKD,OAGnB,IAADwB,EAFFxB,GAGDkB,EAAQlB,GACRsB,GAA0B,QAAlBE,EAAAxB,EAAKyB,qBAAa,IAAAD,OAAA,EAAlBA,EAAoBH,OAAQ,IACpCpC,EAASe,EAAKhB,OAAS,KAJvBM,EAAS,iBAMb8B,GAAW,IAGfM,IACD,IAYH,OAAIP,EAAgBxB,cAAA,OAAAD,SAAK,eACrBL,EAAcI,eAAA,OAAAC,SAAA,CAAK,UAAQL,KAG3BI,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,iBACJD,eAAA,QAAMG,SAhBcC,UACxBC,EAAEC,iBACF,MAAM,MAAEV,SAAgBT,EAASqB,KAAK0B,OAAO,CAAEC,KAAM,CAAEP,UACnDhC,EACAC,EAASD,EAAMc,SAEf0B,MAAM,kCAU8BnC,SAAA,CAChCD,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,UACPC,cAAA,SACIU,KAAK,OACLC,MAAOe,EACPd,SAAWT,GAAMwB,EAAQxB,EAAEU,OAAOF,YAG1Cb,eAAA,OAAAC,SAAA,CACIC,cAAA,SAAAD,SAAO,WACPC,cAAA,SACIU,KAAK,QACLC,MAAOtB,EACP8C,UAAQ,OAGhBnC,cAAA,UAAQU,KAAK,SAAQX,SAAC,0BC7BvBqC,MA5BoBA,IAa3BtC,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,uBACJC,cAAA,MAAAD,SAdkB,CACtB,CAAEsC,GAAI,EAAGX,KAAM,aAAcY,MAAO,aACpC,CAAED,GAAI,EAAGX,KAAM,gBAAiBY,MAAO,aACvC,CAAED,GAAI,EAAGX,KAAM,eAAgBY,MAAO,cAYXC,IAAIC,GACnB1C,eAAA,MAAAC,SAAA,CACIC,cAAA,MAAAD,SAAKyC,EAAKd,OACV1B,cAAA,KAAAD,SAAIyC,EAAKF,QACTtC,cAAA,UAAQyC,QAASA,KAAMC,OAbTC,EAakCH,EAAKH,QAXrEO,QAAQC,IAAI,qBAADC,OAAsBH,IAFHA,OAa2C5C,SAAC,aAHrDyC,EAAKH,UCjB3B,MAuBMU,EAAa7C,UACtB,MAAM,KAAE+B,EAAI,MAAEvC,SAAgBT,EAAS+D,QAClCC,KAAK,WACLC,OAAOC,EAAKzB,KAAMyB,GAEvB,GAAIzD,EACA,MAAM,IAAI0D,MAAM1D,EAAMc,SAE1B,OAAOyB,GC4BIoB,MAzDEA,KACb,MAAOC,EAASC,GAAchE,mBAAsB,OAC7CiE,EAAmBC,GAAwBlE,mBAAsB,OACjEmE,EAAcC,GAAmBpE,mBAAS,IA4BjD,OACIO,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,mBACJD,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,oBACJC,cAAA,SAAOU,KAAK,OAAOkD,OAAO,OAAOhD,SA/BrBV,UACpB,IAAK2D,EAAMhD,OAAOiD,MAAO,OACzB,MAAMX,EAAOU,EAAMhD,OAAOiD,MAAM,GAC5BX,IACAI,EAAWJ,SACLJ,EAAWI,UA4BjBrD,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,+BACJC,cAAA,SAAOU,KAAK,OAAOkD,OAAO,YAAYhD,SA1BhBV,UAC9B,IAAK2D,EAAMhD,OAAOiD,MAAO,OACzB,MAAMX,EAAOU,EAAMhD,OAAOiD,MAAM,GAC5BX,IACAM,EAAqBN,SACfJ,EAAWI,UAuBjBrD,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,wBACJC,cAAA,SACIU,KAAK,OACLC,MAAO+C,EACP9C,SAxBYiD,IACxBF,EAAgBE,EAAMhD,OAAOF,QAwBjBoD,YAAY,qCAEhB/D,cAAA,UAAQyC,QAvBMvC,YAuBqBH,SAAC,mB,sBCvC9CiE,EAAeC,IAAA,IAAGC,UAAWC,GAAyBF,EAAXG,EAAIC,YAAAJ,EAAAK,GAAA,OACjDtE,cAACuE,IAAKC,wBAAA,GACEJ,GAAI,IACRK,OAAQC,GAPHC,aAAaC,QAAQ,aASlB5E,cAACmE,EAASK,YAAA,GAAKE,IAEf1E,cAAC6E,IAAQ,CAACC,GAAG,eA6BdC,MAlBHA,IAEJ/E,cAACgF,IAAM,CAAAjF,SAEHD,eAACmF,IAAM,CAAAlF,SAAA,CACHC,cAACuE,IAAK,CAACW,KAAK,SAAShB,UAAW9E,IAChCY,cAACuE,IAAK,CAACW,KAAK,UAAUhB,UAAWjD,IACjCjB,cAACgE,EAAY,CAACkB,KAAK,IAAIC,OAAK,EAACjB,UAAWb,IACxCrD,cAACgE,EAAY,CAACkB,KAAK,SAAShB,UAAW7C,IACvCrB,cAACgE,EAAY,CAACkB,KAAK,WAAWhB,UAAW5C,IACzCtB,cAACgE,EAAY,CAACkB,KAAK,iBAAiBhB,UAAW9B,IAE/CpC,cAACuE,IAAK,CAACE,OAAQA,IAAMzE,cAAC6E,IAAQ,CAACC,GAAG,kBCzClDM,IAASX,OACPzE,cAACqF,IAAMC,WAAU,CAAAvF,SACfC,cAAC+E,EAAG,MAENQ,SAASC,eAAe,Q","file":"static/js/main.d0103b21.chunk.js","sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL as string;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY as string;\n\nconst supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport { supabase };","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const history = useHistory();\n\n    const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setError(null);\n\n        const { user, error } = await supabase.auth.signIn({\n            email,\n            password,\n        });\n\n        if (error) {\n            setError(error.message);\n        } else {\n            history.push('/chat'); // Redirect to chat page on successful login\n        }\n    };\n\n    return (\n        <div>\n            <h2>Login</h2>\n            <form onSubmit={handleLogin}>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                </div>\n                {error && <p style={{ color: 'red' }}>{error}</p>}\n                <button type=\"submit\">Login</button>\n            </form>\n        </div>\n    );\n};\n\nexport default LoginPage;","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\n\nconst SignupPage = () => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState<string | null>(null);\n    const [success, setSuccess] = useState<string | null>(null);\n\n    const handleSignup = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        setError(null);\n        setSuccess(null);\n\n        const { user, error } = await supabase.auth.signUp({\n            email,\n            password,\n        });\n\n        if (error) {\n            setError(error.message);\n        } else {\n            setSuccess('Signup successful! Please check your email for confirmation.');\n            setEmail('');\n            setPassword('');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Sign Up</h2>\n            <form onSubmit={handleSignup}>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                </div>\n                <button type=\"submit\">Sign Up</button>\n            </form>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            {success && <p style={{ color: 'green' }}>{success}</p>}\n        </div>\n    );\n};\n\nexport default SignupPage;","import React from 'react';\n\nconst AdminPage: React.FC = () => {\n    return (\n        <div>\n            <h1>Admin Dashboard</h1>\n            <section>\n                <h2>User Management</h2>\n                {/* User management functionalities will be implemented here */}\n            </section>\n            <section>\n                <h2>Subscription Management</h2>\n                {/* Subscription management functionalities will be implemented here */}\n            </section>\n        </div>\n    );\n};\n\nexport default AdminPage;","import React, { useEffect, useState } from 'react';\nimport { supabase } from '../supabase/client';\n\nconst UserProfilePage = () => {\n    const [user, setUser] = useState<any>(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    useEffect(() => {\n        const fetchUser = async () => {\n            const user = supabase.auth.user(); // Use .user() for v1\n            if (!user) {\n                setError('No user found');\n            } else {\n                setUser(user);\n                setName(user.user_metadata?.name || '');\n                setEmail(user.email || '');\n            }\n            setLoading(false);\n        };\n\n        fetchUser();\n    }, []);\n\n    const handleUpdateProfile = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const { error } = await supabase.auth.update({ data: { name } }); // Use .update for v1\n        if (error) {\n            setError(error.message);\n        } else {\n            alert('Profile updated successfully!');\n        }\n    };\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div>\n            <h1>User Profile</h1>\n            <form onSubmit={handleUpdateProfile}>\n                <div>\n                    <label>Name:</label>\n                    <input\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </div>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        readOnly\n                    />\n                </div>\n                <button type=\"submit\">Update Profile</button>\n            </form>\n        </div>\n    );\n};\n\nexport default UserProfilePage;","import React from 'react';\n\nconst SubscriptionPage: React.FC = () => {\n    const subscriptionPlans = [\n        { id: 1, name: 'Basic Plan', price: '$10/month' },\n        { id: 2, name: 'Standard Plan', price: '$20/month' },\n        { id: 3, name: 'Premium Plan', price: '$30/month' },\n    ];\n\n    const handleSubscriptionSelect = (planId: number) => {\n        // Logic to handle subscription selection\n        console.log(`Selected plan ID: ${planId}`);\n    };\n\n    return (\n        <div>\n            <h1>Subscription Plans</h1>\n            <ul>\n                {subscriptionPlans.map(plan => (\n                    <li key={plan.id}>\n                        <h2>{plan.name}</h2>\n                        <p>{plan.price}</p>\n                        <button onClick={() => handleSubscriptionSelect(plan.id)}>Select</button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default SubscriptionPage;","import { supabase } from '../supabase/client';\n\nexport const fetchUserData = async (userId: string) => {\n    const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId);\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};\n\nexport const manageSubscription = async (userId: string, subscriptionData: any) => {\n    const { data, error } = await supabase\n        .from('subscriptions')\n        .upsert({ user_id: userId, ...subscriptionData });\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};\n\nexport const uploadFile = async (file: File) => {\n    const { data, error } = await supabase.storage\n        .from('uploads')\n        .upload(file.name, file);\n\n    if (error) {\n        throw new Error(error.message);\n    }\n    return data;\n};","import React, { useState } from 'react';\nimport { supabase } from '../supabase/client';\nimport { uploadFile } from '../utils/db';\n\nconst ChatPage = () => {\n    const [csvFile, setCsvFile] = useState<File | null>(null);\n    const [knowledgeBaseFile, setKnowledgeBaseFile] = useState<File | null>(null);\n    const [dbConnection, setDbConnection] = useState('');\n\n    const handleCsvUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) return;\n        const file = event.target.files[0];\n        if (file) {\n            setCsvFile(file);\n            await uploadFile(file);\n        }\n    };\n\n    const handleKnowledgeBaseUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (!event.target.files) return;\n        const file = event.target.files[0];\n        if (file) {\n            setKnowledgeBaseFile(file);\n            await uploadFile(file);\n        }\n    };\n\n    const handleDbConnection = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setDbConnection(event.target.value);\n    };\n\n    const connectToDatabase = async () => {\n        // Implement database connection logic here\n    };\n\n    return (\n        <div>\n            <h1>Chat Interface</h1>\n            <div>\n                <h2>Upload CSV File</h2>\n                <input type=\"file\" accept=\".csv\" onChange={handleCsvUpload} />\n            </div>\n            <div>\n                <h2>Upload Knowledge Base File</h2>\n                <input type=\"file\" accept=\".txt,.pdf\" onChange={handleKnowledgeBaseUpload} />\n            </div>\n            <div>\n                <h2>Database Connection</h2>\n                <input\n                    type=\"text\"\n                    value={dbConnection}\n                    onChange={handleDbConnection}\n                    placeholder=\"Enter database connection string\"\n                />\n                <button onClick={connectToDatabase}>Connect</button>\n            </div>\n            {/* Chat interface would be implemented here */}\n        </div>\n    );\n};\n\nexport default ChatPage;","import React from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect, useLocation } from 'react-router-dom'; // Changed to HashRouter\nimport LoginPage from './components/LoginPage';\nimport SignupPage from './components/SignupPage';\nimport AdminPage from './components/AdminPage';\nimport UserProfilePage from './components/UserProfilePage';\nimport SubscriptionPage from './components/SubscriptionPage';\nimport ChatPage from './components/ChatPage';\n\n// Simple auth check (replace with real logic as needed)\nconst isAuthenticated = () => {\n    return !!localStorage.getItem('authToken');\n};\n\n// PrivateRoute component\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n    <Route\n        {...rest}\n        render={props =>\n            isAuthenticated() ? (\n                <Component {...props} />\n            ) : (\n                <Redirect to=\"/login\" />\n            )\n        }\n    />\n);\n\nconst DebugRoute = () => {\n    const location = useLocation();\n    return <div style={{position: 'fixed', top: 0, left: 0, background: '#ffc', zIndex: 9999}}>Current route: {location.pathname}</div>;\n};\n\nconst App = () => {\n    return (\n        <Router>\n            {/* <DebugRoute /> */}\n            <Switch>\n                <Route path=\"/login\" component={LoginPage} />\n                <Route path=\"/signup\" component={SignupPage} />\n                <PrivateRoute path=\"/\" exact component={ChatPage} />\n                <PrivateRoute path=\"/admin\" component={AdminPage} />\n                <PrivateRoute path=\"/profile\" component={UserProfilePage} />\n                <PrivateRoute path=\"/subscriptions\" component={SubscriptionPage} />\n                {/* Catch-all: redirect to login */}\n                <Route render={() => <Redirect to=\"/login\" />} />\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}